<launch>
    <arg name="wname" default="earth"/>
    <arg name="rname" default="a1"/>
    <arg name="robot_path" value="(find $(arg rname)_description)"/>
    <arg name="dollar" value="$"/>

    <arg name="paused" default="true"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <!-- Debug mode will hung up the robot, use "true" or "false" to switch it. -->
    <arg name="user_debug" default="false"/>
    <arg name="robot_desc_file" default="$(find realsense_slam)xacro/unitree.xacro"/>
    <!-- <arg name="robot_desc_file" default="$(find lidar_slam)urdf/dawg.xacro"/> -->


    
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find lidar_slam)/worlds/plaza.world"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(arg robot_desc_file)' 
           DEBUG:=$(arg user_debug)"/>
    
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- Set trunk and joint positions at startup -->
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen"
          args="-urdf -z 0.6 -model $(arg rname)_gazebo -param robot_description -unpause"/> 

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(arg dollar)$(arg robot_path)/config/robot_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="false"
          output="screen" ns="/$(arg rname)_gazebo" args="joint_state_controller
          FL_hip_controller FL_thigh_controller FL_calf_controller
          FR_hip_controller FR_thigh_controller FR_calf_controller
          RL_hip_controller RL_thigh_controller RL_calf_controller
          RR_hip_controller RR_thigh_controller RR_calf_controller "/>

    <!-- convert joint states to TF transforms for rviz, etc -->
     <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"
          respawn="false" output="screen">
        <remap from="/joint_states" to="/$(arg rname)_gazebo/joint_states"/>
    </node>

    <!-- load the parameter unitree_controller -->
    <include file="$(find unitree_controller)/launch/set_ctrl.launch">
        <arg name="rname" value="$(arg rname)"/>
    </include>

    <node name="odom_handler" pkg="realsense_slam" type="odom_handler_node"  output="screen" respawn="false" respawn_delay="0">
        <remap from="odom_in" to="/t265/odom/sample"/>
        <remap from="odom_out" to="/odom"/>      
    </node>

    <node pkg="nodelet" type="nodelet"
        args="load image_proc/crop_decimate record_player_manager"
        name="my_decimator">
        <param name="x_offset" type="int" value="0" />
        <param name="y_offset" type="int" value="100" />
        <param name="width" type="int" value="1920" />
        <param name="height" type="int" value="480" />

        <!-- remap input topics -->
        <remap from="camera/image_raw" to="/d435/depth/image_raw"/>
        <remap from="camera/camera_info" to="/d435/depth/camera_info"/>

        <!-- remap output topics -->
        <remap from="camera_out/image_raw" to="/d435_crop/depth/image_raw"/>
        <remap from="camera_out/camera_info" to="/d435_crop/depth/camera_info"/>
    </node>

    <node pkg="nodelet" type="nodelet" args="manager"
        name="record_player_manager" output="screen"/>
    
    <node pkg="nodelet" type="nodelet" name="point_cloud_xyz" 
        args="load depth_image_proc/point_cloud_xyz record_player_manager">
    <remap from="camera_info" to="/d435_crop/depth/camera_info"/>
    <remap from="image_rect" to="/d435_crop/depth/image_raw"/>
  </node>

    <node pkg="unitree_controller" type="unitree_move_teleop" name="unitree_move_teleop" /> 
    <!-- <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard" 
    output="screen" launch-prefix="gnome-terminal command"/>  -->


</launch>
